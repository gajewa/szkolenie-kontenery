# definicja 1 pełnego środowiska aplikacji, wszystkie elementy potrzebe do uruchomienia aplikacji


AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Astro project deployment with S3 and CloudFront (No custom domain)

Parameters:
  ProjectName:
    Type: String
    Default: dev
    Description: The environment to deploy to (e.g., dev, prod)

Resources:

  BackendRepository:
    Type: AWS::ECR::Repository

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: Backend
          Image: !GetAtt BackendRepository.RepositoryUri
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Essential: true
      NetworkMode: awsvpc
      Cpu: 1024
      Memory: 3072
      RequiresCompatibilities:
        - FARGATE

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  ECSService:
    Type: 'AWS::ECS::Service'
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: backend-service
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - sg-0b60fce6753635576
          Subnets:
            - subnet-00169698a4f6d948b
            - subnet-0ffb092ca9af6b446
      TaskDefinition: !Ref BackendTaskDefinition
      LoadBalancers:
        - ContainerName: Backend
          ContainerPort: 8080
          TargetGroupArn: !Ref ALBTargetGroup

  # Application Load Balancer Resources
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ProjectName}-alb"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - subnet-00169698a4f6d948b
        - subnet-0ffb092ca9af6b446
      Type: application
      IpAddressType: ipv4

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ProjectName}-tg"
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: vpc-05cf935bf6e48e70a
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the ALB
      VpcId: vpc-05cf935bf6e48e70a
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

Outputs:
  BackendRepositoryUri:
    Description: URI of the ECR repository
    Value: !GetAtt BackendRepository.RepositoryUri
    Export:
      Name: !Sub "${ProjectName}-BackendRepositoryUri"

  BackendRepositoryName:
    Description: Name of the ECR repository
    Value: !Ref BackendRepository
    Export:
      Name: !Sub "${ProjectName}-BackendRepositoryName"
      
  LoadBalancerDNS:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${ProjectName}-LoadBalancerDNS"
      
  LoadBalancerURL:
    Description: URL of the Application Load Balancer
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}"
    Export:
      Name: !Sub "${ProjectName}-LoadBalancerURL"